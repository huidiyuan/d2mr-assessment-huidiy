data(package = .packages(all.available = TRUE))
data("mtcars")
force(mtcars)
View(mtcars)
data_mtcars <- data("mtcars")
data("mtcars")
head(mtcars)
if (weekdays(Sys.Date()) == "Tuesday" | weekdays(Sys.Date()) == "Thursday") {
course <- TRUE
} else {
course <- FALSE
days_to_add <- 1
while (course == FALSE) {
if (weekdays(Sys.Date() + days_to_add) == "Tuesday" | weekdays(Sys.Date() + days_to_add) == "Thursday") {
course <- TRUE
} else {
days_to_add <- days_to_add + 1
}
}
}
# Assign time of day based on current hour
if (current_hour >= 6 && current_hour < 12) {
time_of_day <- ("morning")
} else if (current_hour >= 12 && current_hour < 18) {
time_of_day <- ("afternoon")
} else {
time_of_day <-("night")
}
if (course == TRUE) {
return(paste("Good", time_of_day, name, "It's", display_time, weekdays(Sys.Date()), "and we have class today", sep = " "))
} else {
if (days_to_add > 1) {
days_to_add <- paste(days_to_add, "days", sep = " ")
} else {
days_to_add <- paste(days_to_add, "day", sep = " ")
}
return(paste("Good", time_of_day, name, "It's", display_time, weekdays(Sys.Date()), "we don't have class today but we will have class in", days_to_add, sep = " "))
}
hello_world <- function(name, current_time = Sys.time()) {
Sys.setlocale("LC_TIME", "English")
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
if (weekdays(Sys.Date()) == "Tuesday" | weekdays(Sys.Date()) == "Thursday") {
course <- TRUE
} else {
course <- FALSE
days_to_add <- 1
while (course == FALSE) {
if (weekdays(Sys.Date() + days_to_add) == "Tuesday" | weekdays(Sys.Date() + days_to_add) == "Thursday") {
course <- TRUE
} else {
days_to_add <- days_to_add + 1
}
}
}
# Assign time of day based on current hour
if (current_hour >= 6 && current_hour < 12) {
time_of_day <- ("morning")
} else if (current_hour >= 12 && current_hour < 18) {
time_of_day <- ("afternoon")
} else {
time_of_day <-("night")
}
if (course == TRUE) {
return(paste("Good", time_of_day, name, "It's", display_time, weekdays(Sys.Date()), "and we have class today", sep = " "))
} else {
if (days_to_add > 1) {
days_to_add <- paste(days_to_add, "days", sep = " ")
} else {
days_to_add <- paste(days_to_add, "day", sep = " ")
}
return(paste("Good", time_of_day, name, "It's", display_time, weekdays(Sys.Date()), "we don't have class today but we will have class in", days_to_add, sep = " "))
}
}
hello_world("Dr. Dowling")
hello_world("Huidi")
print("Hello, world!")
hello_world("Huidi")
hello_world <- function(name, current_time = Sys.time()){
print("Hello, world!")
}
hello_world("Huidi")
# Assign time of day based on current hour
time_transfer <- function(current_time){
if (current_hour >= 6 && current_hour < 12) {
time_of_day <- ("morning")
} else if (current_hour >= 12 && current_hour < 18) {
time_of_day <- ("afternoon")
} else {
time_of_day <-("night")
}
}
hello_world <- function(name, current_time = Sys.time()){
Sys.setlocale("LC_TIME", "English")
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Assign time of day based on current hour
time_transfer(current_hour)
}
hello_world("Huidi")
?Sys.setlocale()
?function
{}
?function{}
?if()
?if()
??if
()
?ifelse
"night"
# Assign time of day based on current hour
time_transfer <- function(current_time){
if (current_hour >= 6 && current_hour < 12) {
"morning"
} else if (current_hour >= 12 && current_hour < 18) {
"afternoon"
} else {
"night"
}
}
hello_world <- function(name, current_time = Sys.time()){
Sys.setlocale("LC_TIME", "English")
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
print(paste("Hello", name, "it is", display_time, "on a", time_of_day)
}
?function()
nameOfClass()
hello_world <- function(name, current_time = Sys.time()){
Sys.setlocale("LC_TIME", "English")
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste("Hello", name, "it is", display_time, "on a", time_of_day))
}
hello_world("Huidi")
# Assign time of day based on current hour
time_transfer <- function(current_hour){
if (current_hour >= 6 && current_hour < 12) {
"morning"
} else if (current_hour >= 12 && current_hour < 18) {
"afternoon"
} else {
"night"
}
}
hello_world <- function(name, current_time = Sys.time()){
Sys.setlocale("LC_TIME", "English")
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste("Hello", name, "it is", display_time, "on a", time_of_day))
}
hello_world("Huidi")
hello_world <- function(name, current_time = Sys.time()){
# Sys.setlocale("LC_TIME", "English")
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste("Hello", name, "it is", display_time, "on a", time_of_day))
}
hello_world("Huidi")
hello_world("Huidi")
time_transfer(19)
random_greeting <- function(){
greetings <- c("Hello", "Hi", "Hey", "Greetings", "Salutations")
return(sample(greetings, 1))
}
hello_world <- function(name, current_time = Sys.time()){
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Assign random greeting
greeting <- random_greeting()
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste(greeting, name, ", good", time_of_day, "it is", display_time))
}
hello_world("Huidi")
# Assign time of day based on current hour
time_transfer <- function(current_hour){
if (current_hour >= 6 && current_hour < 12) {
"morning"
} else if (current_hour >= 12 && current_hour < 18) {
"afternoon"
} else {
"evening"
}
}
hello_world <- function(name, current_time = Sys.time()){
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Assign random greeting
greeting <- random_greeting()
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste(greeting, name, ", good", time_of_day, "!", "it is", display_time))
}
hello_world("Huidi")
hello_world("Huidi")
hello_world("Huidi")
?return()
?paste()
hello_world <- function(name, current_time = Sys.time()){
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Assign random greeting
greeting <- random_greeting()
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time))
}
hello_world("Huidi")
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time, "."))
hello_world <- function(name, current_time = Sys.time()){
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Assign random greeting
greeting <- random_greeting()
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time, "."))
}
hello_world <- function(name, current_time = Sys.time()){
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Assign random greeting
greeting <- random_greeting()
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time, "."))
}
hello_world <- function(name, current_time = Sys.time()){
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Assign random greeting
greeting <- random_greeting()
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time, "."))
}
# Assign time of day based on current hour
time_transfer <- function(current_hour){
if (current_hour >= 6 && current_hour < 12) {
"morning"
} else if (current_hour >= 12 && current_hour < 18) {
"afternoon"
} else {
"evening"
}
}
random_greeting <- function(){
greetings <- c("Hello", "Hi", "Hey", "Greetings", "Salutations")
return(sample(greetings, 1))
}
hello_world("Huidi")
hello_world("Huidi")
hello_world("Huidi")
# Load stringr package
library(stringr)
# Load stringr package
library(stringr)
hello_world <- function(raw_name, current_time = Sys.time()){
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Format raw_name to have the first letter capitalized and the rest lowercase
name <- str_to_title(raw_name)
# Assign random greeting
greeting <- random_greeting()
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time, "."))
}
# Assign time of day based on current hour
time_transfer <- function(current_hour){
if (current_hour >= 6 && current_hour < 12) {
"morning"
} else if (current_hour >= 12 && current_hour < 18) {
"afternoon"
} else {
"evening"
}
}
random_greeting <- function(){
greetings <- c("Hello", "Hi", "Hey", "Greetings", "Salutations")
return(sample(greetings, 1))
}
hello_world("Huidi")
hello_world("hUiDi")
# Load stringr package
library(stringr)
hello_world <- function(raw_name, class_day, current_time = Sys.time()){
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Format raw_name to have the first letter capitalized and the rest lowercase
name <- str_to_title(raw_name)
# Assign random greeting
greeting <- random_greeting()
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time, "."))
}
# Assign time of day based on current hour
time_transfer <- function(current_hour){
if (current_hour >= 6 && current_hour < 12) {
"morning"
} else if (current_hour >= 12 && current_hour < 18) {
"afternoon"
} else {
"evening"
}
}
random_greeting <- function(){
greetings <- c("Hello", "Hi", "Hey", "Greetings", "Salutations")
return(sample(greetings, 1))
}
# Set your class day
class_day <- c("Monday", "Tuseday", "Thursday")
hello_world("hUiDi", class_day)
Sys.Date()
weekdays(Sys.Date())
hello_world <- function(raw_name, class_day, current_time = Sys.time()){
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
weekday <- weekdays(Sys.Date())
# Format raw_name to have the first letter capitalized and the rest lowercase
name <- str_to_title(raw_name)
# Assign random greeting
greeting <- random_greeting()
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time, "."))
}
days_to_class <- function(weekday, class_day, course){
if (weekday %in% class_day){
days_remain <- 0
} else {
days_remain <- 1
while (course == FALSE){
if ((weekday + days_remain) %in% class_day){
course <- TRUE
} else {
days_remain <- days_remain + 1
}
}
}
}
days_to_class <- function(weekday, class_day){
if (weekday %in% class_day){
days_remain <- 0
} else {
course <- FALSE
days_remain <- 1
while (course == FALSE){
if ((weekday + days_remain) %in% class_day){
course <- TRUE
} else {
days_remain <- days_remain + 1
}
}
}
return(days_remain)
}
days_to_class("Monday", class_day)
days_to_class("Wednesday", class_day)
days_to_class(weekdays(Sys.Date()), class_day)
days_to_class <- function(class_day){
if (weekdays(Sys.Date()) %in% class_day){
days_remain <- 0
} else {
course <- FALSE
days_remain <- 1
while (course == FALSE){
if (weekdays(Sys.Date() + days_remain) %in% class_day){
course <- TRUE
} else {
days_remain <- days_remain + 1
}
}
}
return(days_remain)
}
> days_to_class(weekdays(Sys.Date()), class_day)
days_to_class(class_day)
# Load stringr package
library(stringr)
hello_world <- function(raw_name, class_day, current_time = Sys.time()){
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Format raw_name to have the first letter capitalized and the rest lowercase
name <- str_to_title(raw_name)
# Assign random greeting
greeting <- random_greeting()
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
# Calculate days to class
days_remain <- days_to_class(class_day)
if (days_remain == 0){
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time, ". ", "You are having class today!"))
}
elif (days_remain == 1){
# Load stringr package
library(stringr)
hello_world <- function(raw_name, class_day, current_time = Sys.time()){
# Convert the string to a POSIXct object
date_time <- as.POSIXct(current_time, format="%Y-%m-%d %H:%M:%OS")
# Format the POSIXct object to only include date and time up to minutes
display_time <- format(date_time, "%Y-%m-%d %H:%M")
current_hour <- as.numeric(format(current_time, "%H"))
# Format raw_name to have the first letter capitalized and the rest lowercase
name <- str_to_title(raw_name)
# Assign random greeting
greeting <- random_greeting()
# Assign time of day based on current hour
time_of_day <- time_transfer(current_hour)
# Calculate days to class
days_remain <- days_to_class(class_day)
if (days_remain == 0){
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time, ". ", "You are having class today!"))
}
else if (days_remain == 1){
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time, ". ", "You have class tomorrow!"))
}
else{
return(paste0(greeting, " ", name, ", good ", time_of_day, "! ", "It is ", display_time, ". ", "You have ", days_remain, " days until class."))
}
}
# Assign time of day based on current hour
time_transfer <- function(current_hour){
if (current_hour >= 6 && current_hour < 12) {
"morning"
} else if (current_hour >= 12 && current_hour < 18) {
"afternoon"
} else {
"evening"
}
}
random_greeting <- function(){
greetings <- c("Hello", "Hi", "Hey", "Greetings", "Salutations")
return(sample(greetings, 1))
}
days_to_class <- function(class_day){
if (weekdays(Sys.Date()) %in% class_day){
days_remain <- 0
} else {
course <- FALSE
days_remain <- 1
while (course == FALSE){
if (weekdays(Sys.Date() + days_remain) %in% class_day){
course <- TRUE
} else {
days_remain <- days_remain + 1
}
}
}
return(days_remain)
}
# Set your class day
class_day <- c("Monday", "Tuseday", "Thursday")
hello_world("hUiDi", class_day)
